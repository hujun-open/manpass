#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.7.0 on Mon Jul 13 05:41:37 2015
#

import wx

# begin wxGlade: dependencies
import gettext
# end wxGlade
import time
import platform
import common
import os.path
import loginDiag
import apiclient
import addDiag
import myoptions
import unlockDiag
import webbrowser
import listAllPass
import changeMasterPassDiag
import selfDestroyDiag
import selfDestroyQRDiag
import wx.dataview
import shlex
import subprocess
import threading
import multiprocessing
import traceback
import Queue
import newUserDiag
# begin wxGlade: extracode
# end wxGlade
_ = wx.GetTranslation




class cnsort:
    #based on the code from henrysting@gmail.com, change a bit
    def __init__(self):
    # create Pinyin dict
        self.dic_py = dict()
        try:
            f_py = open(common.cur_file_dir()+'/py.dat',"r")
        except:
            return None
        content_py = f_py.read()
        lines_py = content_py.split('\n')
        n=len(lines_py)
        for i in range(0,n-1):
            word_py, mean_py = lines_py[i].split('\t', 1)#将line用\t进行分割，最多分一次变成两块，保存到word和mean中去
            self.dic_py[word_py]=mean_py
        f_py.close()



    # 辞典查找函数
    def searchdict(self,dic,uchar):
        if isinstance(uchar, str):
            uchar = unicode(uchar,'utf-8')
        if uchar >= u'\u4e00' and uchar<=u'\u9fa5':
            value=dic.get(uchar.encode('utf-8'))
            if value == None:
                value = '*'
        else:
            value = uchar
        if isinstance(value,str):
            return value.decode('gbk')
        else:
            return value


    # 将一个字符串转换成一个含每个字拼音的list，字符串中的连续的ASCII会按原样放在一个值内
    def strToPYS(self,istr):
        if isinstance(istr,str):
            istr=istr.decode('gbk')
            istr=istr.encode('utf-8')
            istr=istr.decode('utf-8')
        else:
            if isinstance(istr,unicode):
                istr=istr.encode('utf-8')
                istr=istr.decode('utf-8')
            else:
                return None
        rstr=''
        for ichr in istr:
            if ord(ichr)<=255:rstr+=ichr
            else:
                rstr+=self.searchdict(self.dic_py,ichr)[:-1]
        return rstr


def PauseLockWhileBusy(func):
    def func_wrapper(*args, **kwds):
        args[0].GetParent().canlock=False
        func(*args, **kwds)
        args[0].GetParent().canlock=True
    return func_wrapper

class PassListCtrl(wx.dataview.DataViewListCtrl):
    def __init__(self,parent,filter_txtctrl):
        wx.dataview.DataViewListCtrl.__init__(self,parent,wx.ID_ANY)
        self.AppendTextColumn(_("Website/Application"))
        self.AppendTextColumn(_("Username"))
        #self.AppendTextColumn(_("Password"),mode=wx.dataview.DATAVIEW_CELL_ACTIVATABLE)
        self.AppendTextColumn(_("Creation time"))
        self.AppendTextColumn(_("Rev"))
        self.fctrl=filter_txtctrl
        self.filterme=True


        self.apc=self.GetParent().apiclient
        self.Bind(wx.dataview.EVT_DATAVIEW_ITEM_ACTIVATED,self.OnDClick,self)
        self.Bind(wx.dataview.EVT_DATAVIEW_ITEM_CONTEXT_MENU,self.OnPopMenu,self)

        self.passlist=[]
        self.cnsort=cnsort()
        self.createPopMenu()





    def getList(self):
        self.GetParent().setStatusTxt(_("Loading..."))
        self.GetParent().progress_bar.SetValue(0)
        self.GetParent().showLoading()
        t=threading.Thread(target=self.apc.getAllLatest, args=(self.GetParent(),))
        t.daemon=True
        t.start()
##        try:
##
##            self.passlist=self.apc.getAllLatest(self.GetParent().progress_bar)
##        except Exception as Err:
##            wx.MessageBox(_("Unable to get saved credentials!\n")+unicode(Err),_("Error"),0|wx.ICON_ERROR,self)
##            self.Close()
##            return
##        for p in self.passlist:
##            p["PYS"]=self.cnsort.strToPYS(p["Meta"].lower())
##        self.GetParent().unlock()
##        self.GetParent().setStatusTxt(_("Done."))

    def reloadWithoutGet(self):
        self.DeleteAllItems()
        if len(self.passlist)==0:
            return
        self.passlist=sorted(self.passlist,key=lambda k: k['Meta'].lower())
        filter_key=self.fctrl.GetValue().strip()
        i=0
        for p in self.passlist:
            data=[p['Meta'],p['Uname'],p['Pass_time'],unicode(p['Pass_rev'])]
            if self.GetParent().listall==False and common.isHidden(p["Kgroup"]):
                i+=1
                continue
            if filter_key=="" or not self.filterme:
                self.AppendItem(data,i)
            else:
                if p['PYS'].find(filter_key) !=-1:
                    self.AppendItem(data,i)
            i+=1
        col=self.GetColumn(0)
        col.SetWidth(wx.COL_WIDTH_AUTOSIZE)
        col=self.GetColumn(1)
        col.SetWidth(wx.COL_WIDTH_AUTOSIZE)


    def reload(self,filterme=True):
        #reload the list
        self.GetParent().canlock=False
        self.getList()
        self.filterme=filterme
##        self.reloadWithoutGet()


    def OnDClick(self,evt):
        item=evt.GetItem()
        i=self.GetItemData(item)
        self.copyInfoToClip(i)


    def copyInfoToClip(self,i,dkey="Pass"):
        dlg=None
        itemname=""
        if dkey=="Pass": itemname=_("Password")
        if dkey=="Uname": itemname=_("Username")
        if i < len(self.passlist) and not wx.TheClipboard.IsOpened():
            cdata=wx.TextDataObject()
            cdata.SetText(self.passlist[i][dkey])
            wx.TheClipboard.Open()
            wx.TheClipboard.SetData(cdata)
            wx.TheClipboard.Close()
##            dlg = wx.MessageDialog(self, itemname+_(' Copied to Clipboard'),
##                           _('Done'),
##                           wx.OK | wx.ICON_INFORMATION)
            self.GetParent().setStatusTxt(itemname+_(" Copied to Clipboard."))
            if dkey=="Pass":
                self.GetParent().StartClearTimer(self.passlist[i][dkey])

        else:
            dlg = wx.MessageDialog(self,itemname+_(' Copy Failed'),
                           _('Error'),
                           wx.OK | wx.ICON_ERROR
                                                          )
        if dlg!=None:
            dlg.ShowModal()
            dlg.Destroy()


    def createPopMenu(self):
        self.pmenu=wx.Menu()
        mitem=self.pmenu.Append(wx.NewId(),_("Copy &Username"))
        self.Bind(wx.EVT_MENU, self.OnCopyUname, id=mitem.GetId())
        mitem=self.pmenu.Append(wx.NewId(),_("Show Password as &QR code"))
        self.Bind(wx.EVT_MENU, self.ShowPass, id=mitem.GetId())
        mitem=self.pmenu.Append(wx.NewId(),_("&Lock"))
        self.Bind(wx.EVT_MENU, self.OnLock, id=mitem.GetId())
        self.pmenu.AppendSeparator()
        mitem=self.pmenu.Append(wx.NewId(),_("&Add ..."))
        self.Bind(wx.EVT_MENU, self.OnAdd, id=mitem.GetId())
        mitem=self.pmenu.Append(wx.NewId(),_("&Reload"))
        self.Bind(wx.EVT_MENU, self.OnReload, id=mitem.GetId())
        self.pmenu.AppendSeparator()
        mitem=self.pmenu.Append(wx.NewId(),_("&Change ..."))
        self.Bind(wx.EVT_MENU, self.OnChangePass, id=mitem.GetId())
        mitem=self.pmenu.Append(wx.NewId(),_("List &history passwords ..."))
        self.Bind(wx.EVT_MENU, self.OnListAllPass, id=mitem.GetId())
        mitem=self.pmenu.Append(wx.NewId(),_("Show ..."))
        self.Bind(wx.EVT_MENU, self.OnShowCred, id=mitem.GetId())
        mitem=self.pmenu.Append(wx.NewId(),_("Delete"))
        self.Bind(wx.EVT_MENU, self.OnDel, id=mitem.GetId())

        self.pmenu.AppendSeparator()
        self.submenu_adv=wx.Menu()
        mitem=self.submenu_adv.Append(wx.NewId(),_("Option"))
        self.Bind(wx.EVT_MENU, self.OnOption, id=mitem.GetId())
        mitem=self.submenu_adv.Append(wx.NewId(),_("Backup DB..."))
        self.Bind(wx.EVT_MENU, self.OnBackup, id=mitem.GetId())
        mitem=self.submenu_adv.Append(wx.NewId(),_("Import DB..."))
        self.Bind(wx.EVT_MENU, self.OnImport, id=mitem.GetId())
        mitem=self.submenu_adv.Append(wx.NewId(),_("Change master password..."))
        self.Bind(wx.EVT_MENU, self.OnChangeMasterPass, id=mitem.GetId())
        self.pmenu.AppendMenu(wx.NewId(),_("Advanced"),self.submenu_adv)
        self.pmenu.AppendSeparator()
        mitem=self.pmenu.Append(wx.NewId(),_("About"))
        self.Bind(wx.EVT_MENU, self.OnAbout, id=mitem.GetId())
        mitem=self.pmenu.Append(wx.NewId(),_("Help"))
        self.Bind(wx.EVT_MENU, self.OnHelp, id=mitem.GetId())
        mitem=self.pmenu.Append(wx.NewId(),_("Exit"))
        self.Bind(wx.EVT_MENU, self.OnExit, id=mitem.GetId())
##        mitem=self.pmenu.Append(wx.NewId(),_("Exit All"))
##        self.Bind(wx.EVT_MENU, self.OnExitAll, id=mitem.GetId())



    def OnPopMenu(self,evt):
        self.PopupMenu(self.pmenu)

    @PauseLockWhileBusy
    def OnDel(self,evt):
        #delete all saved password for the meta-id
        sel_item=self.GetSelection()
        if not sel_item.IsOk():
            wx.MessageBox(_("Select a line first!"),_("Error"),0|wx.ICON_ERROR,self)
            return
        i=self.GetItemData(sel_item)
        dlg=wx.MessageDialog(self, _("Are you sure to delete ALL saved passwords for ")+self.passlist[i]['Meta']+", "+self.passlist[i]['Uname']+"?", _("Are you sure?"), wx.YES_NO | wx.ICON_QUESTION|wx.NO_DEFAULT)
        if dlg.ShowModal()==wx.ID_YES:
            try:
                self.apc.remove(self.passlist[i]['Meta'],self.passlist[i]['Uname'])
            except Exception as Err:
                wx.MessageBox(_("Unable to remove credential from DB!\n")+unicode(Err),_("Error"),0|wx.ICON_ERROR,self)
                return

            del self.passlist[i]
            self.reloadWithoutGet()

    @PauseLockWhileBusy
    def OnChangePass(self,evt):
        #create a new rev of password or add a pass if meta or username changes
        sel_item=self.GetSelection()
        if not sel_item.IsOk():
            wx.MessageBox(_("Select a line first!"),_("Error"),0|wx.ICON_ERROR,self)
            return
        i=self.GetItemData(sel_item)
        dlg=addDiag.AddPassDiag(self,self.passlist[i]['Meta'],self.passlist[i]['Uname'],self.passlist[i]['Pass'],self.passlist[i]['Remark'],self.passlist[i]['Kgroup'])
        if dlg.ShowModal()==wx.ID_OK:
            try:
                self.apc.add(dlg.meta,dlg.uname,dlg.upass,dlg.remark,dlg.kgroup)
            except Exception as Err:
                wx.MessageBox(_("Unable to save credential!\n")+unicode(Err),_("Error"),0|wx.ICON_ERROR,self)
                return
            try:
                r=self.apc.get(dlg.meta,dlg.uname)
            except:
                wx.MessageBox(_("Getting latest record failed!\n")+unicode(Err),_("Error"),0|wx.ICON_ERROR,self)
                return
            r["PYS"]=self.cnsort.strToPYS(r["Meta"].lower())
            if not dlg.new_entry:
                    del self.passlist[i]
            self.passlist.insert(i,r)
            self.reloadWithoutGet()


    def OnCopyUname(self,evt):
        sel_item=self.GetSelection()
        if not sel_item.IsOk():
            wx.MessageBox(_("Select a line first!"),_("Error"),0|wx.ICON_ERROR,self)
            return
        i=self.GetItemData(sel_item)
        self.copyInfoToClip(i,"Uname")


    def OnReload(self,evt):
        self.reload()
    @PauseLockWhileBusy
    def OnAdd(self,evt):
        dlg=addDiag.AddPassDiag(self)
        if dlg.ShowModal()==wx.ID_OK:
            #self.apc.add(dlg.meta,dlg.uname,dlg.upass)
            try:
                self.apc.add(dlg.meta,dlg.uname,dlg.upass,dlg.remark,dlg.kgroup)
            except Exception as Err:
                wx.MessageBox(_("Unable to save credential!\n")+unicode(Err),_("Error"),0|wx.ICON_ERROR,self)
                return
            try:
                r=self.apc.get(dlg.meta,dlg.uname)
                r["PYS"]=self.cnsort.strToPYS(r["Meta"].lower())
                self.passlist.insert(0,r)
                self.reloadWithoutGet()
            except:
                wx.MessageBox(_("Getting latest record failed!\n")+unicode(Err),_("Error"),0|wx.ICON_ERROR,self)
                return
    @PauseLockWhileBusy
    def OnChangeMasterPass(self,evt):
        dlg=changeMasterPassDiag.ChangeMasterPassDiag(self)
        dlg.ShowModal()
        dlg.Destroy()
        self.reload()

##        if dlg.ShowModal()==wx.ID_OK:
##            self.reload()

    @PauseLockWhileBusy
    def OnListAllPass(self,evt):
        sel_item=self.GetSelection()
        if not sel_item.IsOk():
            wx.MessageBox(_("Select a line first!"),_("Error"),0|wx.ICON_ERROR,self)
            return
        i=self.GetItemData(sel_item)
        dlg=listAllPass.ListAllPassDiag(self,self.passlist[i]['Meta'],self.passlist[i]['Uname'],self.apc)
        dlg.ShowModal()
        try:
            r=self.apc.get(self.passlist[i]['Meta'],self.passlist[i]['Uname'])
            del self.passlist[i]
            if r!=None:
                r["PYS"]=self.cnsort.strToPYS(r["Meta"].lower())
                self.passlist.insert(i,r)
            self.reloadWithoutGet()
        except Exception as Err:
            wx.MessageBox(_("Getting latest record failed!\n")+unicode(type(Err))+" "+unicode(Err),_("Error"),0|wx.ICON_ERROR,self)
            return

    @PauseLockWhileBusy
    def OnOption(self,evt):
        self.GetParent().showOptionDiag()
    @PauseLockWhileBusy
    def OnAbout(self,evt):
        self.GetParent().ShowAbout()

    def OnExit(self,evt):
        self.GetParent().ExitMe()


    def OnLock(self,evt):
        self.GetParent().lock()
    @PauseLockWhileBusy
    def ShowPass(self,evt):
        sel_item=self.GetSelection()
        if not sel_item.IsOk():
            wx.MessageBox(_("Select a line first!"),_("Error"),0|wx.ICON_ERROR,self)
            return
        i=self.GetItemData(sel_item)
        dlg=selfDestroyQRDiag.SelfDestroyQRDiag(self,self.passlist[i]["Pass"],30)
        dlg.ShowModal()
        dlg.Destroy()

    @PauseLockWhileBusy
    def OnShowCred(self,evt):
        sel_item=self.GetSelection()
        if not sel_item.IsOk():
            wx.MessageBox(_("Select a line first!"),_("Error"),0|wx.ICON_ERROR,self)
            return
        i=self.GetItemData(sel_item)
        dlg=addDiag.AddPassDiag(self,self.passlist[i]['Meta'],self.passlist[i]['Uname'],self.passlist[i]['Pass'],self.passlist[i]['Remark'],self.passlist[i]['Kgroup'],readonly=True)
        dlg.ShowModal()
        dlg.Destroy()

    @PauseLockWhileBusy
    def OnBackup(self,evt):
        waitbox=wx.BusyInfo(_("Backuping database, please wait..."))
        try:
            rs=self.apc.dump()
        except Exception as Err:
            del waitbox
            wx.MessageBox(_("Unable to backup database!\n")+unicode(Err),_("Error"),0|wx.ICON_ERROR,self)
            return

        del waitbox
        dlg = wx.FileDialog(
            self, message=_("Save Backup database as ..."), defaultDir=os.getcwd(),
            defaultFile=self.GetParent().uname+".manpassdb",
            wildcard="Manpass DB backup files (*.manpassdb)|*.manpassdb",
            style=wx.FD_SAVE|wx.FD_OVERWRITE_PROMPT
            )
        if dlg.ShowModal()==wx.ID_OK:
            fpath=dlg.GetPath()
            outf=open(fpath,"wb")
            outf.write(rs)
            outf.close()
            wx.MessageBox(_("Database backuped successfully as ")+fpath,_("Done"),wx.OK,self)


    @PauseLockWhileBusy
    def OnImport(self,evt):
        dlg = wx.FileDialog(
            self, message=_("Choose the database file to be imported"), defaultDir=os.getcwd(),
            defaultFile=self.GetParent().uname+".manpassdb",
            wildcard="Manpass DB backup files (*.manpassdb)|*.manpassdb",
            style=wx.FD_OPEN|wx.FD_FILE_MUST_EXIST
            )
        if dlg.ShowModal()==wx.ID_OK:
            waitbox=wx.BusyInfo(_("Importing database, please wait..."))
            fpath=dlg.GetPath()
            inf=open(fpath,"rb")
            rjs=inf.read()
            inf.close()
            try:
                self.apc.importJson(rjs)
            except Exception as Err:
                del waitbox
                wx.MessageBox(_("Import database failed!\n")+unicode(Err),_("Error"),0|wx.ICON_ERROR,self)
                return
            del waitbox
            self.reload()
            wx.MessageBox(_("Database imported successfully"),_("Done"),wx.OK,self)


    def OnHelp(self,evt):
        url="file://"+common.cur_file_dir()+'/help.htm'
        webbrowser.open_new_tab(url)

class MyTaskbarIcon(wx.TaskBarIcon):
    def __init__(self,frame):
        wx.TaskBarIcon.__init__(self)
        self.frame=frame
        self.MENU_RESTORE=wx.NewId()
        self.MENU_QUIT=wx.NewId()
        self.Bind(wx.EVT_MENU,self.OnRestore,id=self.MENU_RESTORE)
        self.Bind(wx.EVT_MENU,self.OnQuit,id=self.MENU_QUIT)

    def CreatePopupMenu(self):
        menu = wx.Menu()
        menu.Append(self.MENU_RESTORE, _("Bring up Manpass window"))
        menu.Append(self.MENU_QUIT,_("Quit Manpass"))
        return menu

    def OnRestore(self,evt):
        self.frame.Show(True)
        self.frame.Raise()

    def OnQuit(self,evt):
        self.frame.ExitMe(None)

class MainPannel(wx.Frame):
    def __init__(self, parent,uname,upass,dpool,epool):
        # begin wxGlade: MainPannel.__init__
        self.version=1.0
        self.canlock=True
        self.listall=False
        self.last_copied_pass=None
        wx.Frame.__init__(self,parent,size=(1000,1000),style=wx.TAB_TRAVERSAL|wx.DEFAULT_FRAME_STYLE|wx.WANTS_CHARS)
        self.DWorkerPool=dpool
        self.EWrokerPool=epool
        self.uname=uname
        self.upass=upass
        self.icon=wx.Icon(os.path.join(common.cur_file_dir(),"manpassc.ico"),wx.BITMAP_TYPE_ICO)
        self.SetIcon(self.icon)
        #self.chkupdate_thread=checkUpdate.ChkUpdateThread("http://192.168.1.1:8090/ver.txt",self.version,self)

        #username, password must be encoded into utf-8 string before they could be used by crypto functions
        self.lock_label=wx.HyperlinkCtrl(self,wx.ID_ANY,_("Unlock Me"),style=wx.HL_ALIGN_CENTRE)
        self.progress_bar=wx.Gauge(self,wx.ID_ANY)
        self.status_bar=wx.StatusBar(self,wx.ID_ANY)
        self.SetStatusBar(self.status_bar)

        defconflist=[
        (_("Basic Options"),
                [(("addr"),{"desc":_("Listening address"),"value":"127.0.0.1","type":"string"}),
                 (("port"),{"desc":_("Listening port"),"value":9000,"type":"int"}),
                 (("idle_timer"),{"desc":_("Idle lock timer(seconds)"),"value":60,"type":"int"}),
                 (("startup_minimize"),{"desc":_("Minimize the window upon startup"),"value":False,"type":"bool"}),
                 (("close&lock"),{"desc":_("Lock the window upon close(windows only)"),"value":True,"type":"bool"}),
                    ]
            ),
        ]
        self.OptionDiag=myoptions.OptionDiag(self,"manpass.conf",defconflist,self.uname)
        self.confDict=None
        self.confDict=self.OptionDiag.toDict()
        if not common.checkTCPPort(self.confDict['addr'],self.confDict['port']):
            waitbox=wx.BusyInfo(_("Starting Manpass server, please wait..."))
            cmd=common.getManpassdExeName()
            exename=cmd
            cmd+=" -username={uname} -pipepass=true -svrip={ip} -svrport={port}".format(uname=self.uname,ip=self.confDict['addr'],port=self.confDict['port'])
            args=shlex.split(cmd)
            if platform.system()=="Windows":
                startupinfo = subprocess.STARTUPINFO()
                startupinfo.dwFlags|= subprocess.STARTF_USESHOWWINDOW
            else:
                startupinfo = None
            try:
                self.svrp=subprocess.Popen(args,executable=exename, stdin=subprocess.PIPE,stdout=subprocess.PIPE,stderr=subprocess.PIPE,shell=False,startupinfo=startupinfo)
            except Exception as Err:
                del waitbox
                wx.MessageBox(unicode(Err),_("Error"),0|wx.ICON_ERROR,self)
                self.ExitMe()
                return

            def enqueue_output(out, queue):
                for line in iter(out.readline, b''):
                    queue.put(line)
                out.close()
            errq=Queue.Queue()
            t2=newUserDiag.EnQThread(self.svrp.stderr,errq)
            t2.daemon=True
            t2.start()
            self.svrp.stdin.write(self.upass+"\n")
            self.svrp.stdin.close()
            ferror=False
            ferror_msg=""
            def check_output(errq):
                t0=time.time()
                ferror=False
                while True:
                    wx.GetApp().Yield()
                    try:
                        errline=errq.get_nowait()
                    except Queue.Empty:
                        if time.time()-t0>30.0:
                            ferror=True
                            ferror_msg="Time out"
                            break
                        pass
                    else:
                        if errline.find("Server started")!=-1:
                            break
                        if errline.find("Fatal Error")!=-1:
                            ferror=True
                            ferror_msg=errline
                            break
                        if (time.time()-t0)>30.0:
                            ferror=True
                            ferror_msg="Time out"
                            break
                t2.stop()
                if ferror:
##                    wx.MessageBox(_("Server failed to start!\n")+unicode(ferror_msg),_("Error"),0|wx.ICON_ERROR,self)
                    return _("Server failed to start!\n")+unicode(ferror_msg)
                else:
                    return True
            startresult=check_output(errq)
            if startresult!=True:
                del waitbox
                wx.MessageBox(startresult,_("Error"),0|wx.ICON_ERROR,self)
                self.ExitMe()
                return
            del waitbox

        try:
            cadata=apiclient.loadCAFile(self.uname,self.upass,self.confDict['confDir'])
        except Exception as Err:
            wx.MessageBox(_("Authentication Failed!\n")+unicode(Err),_("Error"),0|wx.ICON_ERROR,self)
            self.ExitMe()
            return
        try:
            self.apiclient=apiclient.APIClient(self.confDict['addr'],self.confDict['port'],cadata,
            os.path.join(self.confDict["confDir"],"ee.cert"),
            os.path.join(self.confDict["confDir"],"ee.key"),self.upass,
            self.DWorkerPool,self.EWrokerPool)
        except Exception as Err:
##            traceback.print_exc(Err)
            wx.MessageBox(_("Failed to connect to the server!"),_("Error"),0|wx.ICON_ERROR,self)
            self.ExitMe()
            return

        self.SetTitle("Manpass - "+self.uname.decode("utf-8"))

        if platform.system()=="Windows":
            self.taskicon=MyTaskbarIcon(self)
            self.taskicon.SetIcon(self.icon)
            wx.EVT_TASKBAR_LEFT_UP(self.taskicon,self.OnDClickTaskIcon)

        self.Bind(wx.EVT_CLOSE,self.HideMe)


        self.timer_lock=wx.Timer(self,wx.NewId())
        self.timer_clear=wx.Timer(self,wx.NewId())
        self.timer_statustxt=wx.Timer(self,wx.NewId())
        self.timer_lock.Start(self.confDict['idle_timer']*1000,wx.TIMER_CONTINUOUS)
        self.text_ctrl_search_input = wx.SearchCtrl(self, wx.NewId(),"")
        self.list_ctrl_1 = PassListCtrl(self,self.text_ctrl_search_input)


        self.Bind(wx.EVT_TIMER,self.OnTimerLock,self.timer_lock)
        self.Bind(wx.EVT_TIMER,self.OnTimerClear,self.timer_clear)
        self.Bind(wx.EVT_TIMER,self.OnTimerStatusTxt,self.timer_statustxt)

        self.Bind(wx.EVT_TEXT,self.OnFilter,self.text_ctrl_search_input)
        self.text_ctrl_search_input.Bind(wx.EVT_SET_FOCUS,self.OnFilterAct)
        self.text_ctrl_search_input.Bind(wx.EVT_CHAR,self.OnChar)

        self.Bind(wx.EVT_CHAR,self.OnChar)
        self.list_ctrl_1.Bind(wx.EVT_CHAR,self.OnChar)
        self.lock_label.Bind(wx.EVT_CHAR,self.OnChar)
##        self.text_ctrl_search_input.Bind(wx.EVT_SET_FOCUS,self.OnFilterAct)

        self.__set_properties()
        self.__do_layout()
        self.CentreOnScreen()
        self.SetSize((400,400))
        self.list_ctrl_1.reload()
        self.text_ctrl_search_input.SetFocus()
        self.text_ctrl_search_input.SetValue("")


        #self.Bind(wx.EVT_ICONIZE,self.HideMe)
        self.lock_label.Bind(wx.EVT_HYPERLINK,self.OnUnlock)

        #self.text_ctrl_search_input.Bind(wx.EVT_CHAR,self.resetTimer)

        self.list_ctrl_1.Bind(wx.dataview.EVT_DATAVIEW_SELECTION_CHANGED,self.resetTimer)
        self.list_ctrl_1.Bind(wx.dataview.EVT_DATAVIEW_ITEM_ACTIVATED,self.resetTimer)
        self.list_ctrl_1.Bind(wx.dataview.EVT_DATAVIEW_COLUMN_HEADER_CLICK,self.resetTimer)
        self.list_ctrl_1.Bind(wx.dataview.EVT_DATAVIEW_COLUMN_HEADER_RIGHT_CLICK,self.resetTimer)
        self.list_ctrl_1.Bind(wx.dataview.EVT_DATAVIEW_ITEM_CONTEXT_MENU,self.resetTimer)
        self.Bind(wx.EVT_ACTIVATE,self.resetTimer)
        self.Bind(common.EVT_MANPASS_FATALERR,self.OnFatal)
        self.Bind(common.EVT_MANPASS_PROGRESS,self.UpdateProgress)
        self.Bind(common.EVT_MANPASS_LOAD_DONE,self.LoadDone)
        self.Bind(wx.EVT_SET_FOCUS,self.OnFocus)
        #self.Bind(checkUpdate.EVT_CHK_UPDATE,self.CheckUpdateDone)

        if platform.system()=="Windows":
            import win32con
            self.RegisterHotKey(52445,win32con.MOD_CONTROL,ord("I"))
            self.Bind(wx.EVT_HOTKEY, self.OnDClickTaskIcon, id=52445)


        if self.confDict['startup_minimize']:
            self.HideMe(None)
        else:
            self.Show(True)
            self.Raise()

        #self.chkupdate_thread.start()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MainPannel.__set_properties
        self.text_ctrl_search_input.SetToolTip(wx.ToolTip(_("Type in keyword to search")))
        self.text_ctrl_search_input.ShowCancelButton(True)
        self.list_ctrl_1.SetFocus()

        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MainPannel.__do_layout

        self.sizer_all = wx.BoxSizer(wx.VERTICAL)
        self.sizer_all.Add(self.text_ctrl_search_input, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 5)
        self.sizer_all.Add(self.list_ctrl_1, 1, wx.EXPAND, 0)
        sizer_h=wx.BoxSizer(wx.HORIZONTAL)
        sizer_h.Add(self.lock_label,1,wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.TOP,0)
        self.sizer_all.Add(sizer_h,1,wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.TOP,0)
        self.lock_label.Hide()

        sizer_h2=wx.BoxSizer(wx.HORIZONTAL)
        sizer_h2.Add(self.progress_bar,1,wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.TOP,0)
        self.sizer_all.Add(sizer_h2,1,wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.TOP,0)
        self.progress_bar.Hide()
        #self.text_ctrl_search_input.Hide()
        #self.list_ctrl_1.Hide()

        self.SetSizer(self.sizer_all)
        self.sizer_all.Fit(self)

        self.Layout()
        # end wxGlade


    def setStatusTxt(self,txt):
        self.status_bar.SetStatusText(txt)
        self.timer_statustxt.Start(1000*3,wx.TIMER_ONE_SHOT)

    def OnTimerStatusTxt(self,evt):
        self.status_bar.SetStatusText("")

    def OnUnlock(self,evt):
        dlg=unlockDiag.UnlockDiag(self,self.uname)
        if dlg.ShowModal()==wx.ID_OK:
            if dlg.text_ctrl_upass.GetValue()==self.upass:
                self.unlock()
            else:
                wx.MessageBox(_("Wrong Password!"),_("Error"),0|wx.ICON_ERROR,self)
                return

    def unlock(self):
        self.lock_label.Hide()
        self.progress_bar.Hide()
        self.list_ctrl_1.Show(True)
        self.text_ctrl_search_input.Show(True)
        self.Layout()
        self.listall=False
        self.ShowHidden()
        self.timer_lock.Start(self.confDict["idle_timer"]*1000,wx.TIMER_CONTINUOUS)
        self.text_ctrl_search_input.SetFocus()

    def lock(self):
        self.timer_lock.Stop()
        self.list_ctrl_1.Show(False)
        self.text_ctrl_search_input.Show(False)
        self.lock_label.Show(True)
        self.progress_bar.Hide()
        self.Layout()


    def showLoading(self):
        self.timer_lock.Stop()
        self.list_ctrl_1.Show(False)
        self.text_ctrl_search_input.Show(False)
        self.lock_label.Show(False)
        self.progress_bar.Show(True)
        self.Layout()




    def OnFilter(self,evt):
        self.text_ctrl_search_input.ShowCancelButton(self.text_ctrl_search_input.GetValue()!="")
##        if self.text_ctrl_search_input.GetValue()=="":
##            self.text_ctrl_search_input.ShowCancelButton(False)
##        else:
##            self.text_ctrl_search_input.ShowCancelButton(True)
        self.list_ctrl_1.reloadWithoutGet()

    def OnFilterAct(self,evt):
        self.text_ctrl_search_input.Clear()
        self.list_ctrl_1.reloadWithoutGet()
        evt.Skip()

    def ShowHidden(self):
        if self.listall==True:
            self.text_ctrl_search_input.SetBackgroundColour(wx.TheColourDatabase.Find("DARK GREY"))
            self.text_ctrl_search_input.SetForegroundColour(wx.TheColourDatabase.Find("WHITE"))
        else:
            self.text_ctrl_search_input.SetBackgroundColour(wx.NullColour)
            self.text_ctrl_search_input.SetForegroundColour(wx.NullColour)
        self.text_ctrl_search_input.Refresh()
        self.list_ctrl_1.reloadWithoutGet()

    def OnChar(self,evt):
        self.resetTimer(None)
        if evt.GetKeyCode()==wx.WXK_ESCAPE:
            if self.text_ctrl_search_input.GetValue()=="" or self.text_ctrl_search_input.IsShown()==False:
                self.HideMe(None)
                evt.Skip()
                return
            self.text_ctrl_search_input.Clear()
        else:
            if evt.GetKeyCode()==wx.WXK_CONTROL_H:
                if evt.GetModifiers() == wx.MOD_CONTROL+wx.MOD_SHIFT:
                    self.listall=not self.listall
                    self.ShowHidden()
                    return

        evt.Skip()

    def ShowAbout(self):
        info=wx.AboutDialogInfo()
        info.AddDeveloper("Hu Jun")
        info.SetIcon(self.icon)
        info.SetName("Manpass")
        info.SetDescription("A Secure Password Manager")
        info.SetVersion(unicode(self.version))
        info.WebSite=("https://github.com/hujun-open/manpass","Manpass website")
        wx.AboutBox(info,self)

    def OnDClickTaskIcon(self,evt):
        self.Show(True)
        self.Raise()

    def HideMe(self,evt):
        if platform.system()=="Windows":
            self.Hide()
        else:
            self.Iconize(True)
        if self.confDict['close&lock']:
            self.lock()


    def ExitMe(self,evt=None):
        #do some cleanup
        if hasattr(self,"timer_lock"):
            self.timer_lock.Stop()
            self.timer_lock.Destroy()
        if hasattr(self,"timer_clear"):
            self.OnTimerClear(None)
            self.timer_clear.Stop()
            self.timer_clear.Destroy()
        if hasattr(self,"taskicon"):
            self.taskicon.RemoveIcon()
            self.taskicon.Destroy()

        self.Hide()
        self.DWorkerPool.destruct()
        self.EWrokerPool.destruct()

        self.Destroy()

    def OnTimerLock(self,evt):
        if self.confDict['idle_timer']>0 and self.canlock:
            self.lock()


    def resetTimer(self,evt):
        self.timer_lock.Start(self.confDict['idle_timer']*1000,wx.TIMER_CONTINUOUS)
        if evt!=None:
            evt.Skip()


    def showOptionDiag(self):
        self.OptionDiag.ShowModal()
        self.confDict=self.OptionDiag.toDict()
        if self.confDict['idle_timer']<=0:
            self.timer_lock.Stop()
        else:
            self.timer_lock.Stop()
            self.timer_lock.Start(self.confDict['idle_timer']*1000,wx.TIMER_CONTINUOUS)


    def OnFatal(self,evt):
        wx.MessageBox(evt.Value+_("\n Application will now exit\n"),_("Fatal Error"),0|wx.ICON_ERROR,self)
        self.ExitMe()

    def UpdateProgress(self,evt):
        self.progress_bar.SetRange(evt.Range)
        self.progress_bar.SetValue(evt.Pos)

    def LoadDone(self,evt):
        self.setStatusTxt(_(""))
        self.list_ctrl_1.passlist=evt.Passlist
        for p in self.list_ctrl_1.passlist:
            p["PYS"]=self.list_ctrl_1.cnsort.strToPYS(p["Meta"].lower())
        self.list_ctrl_1.reloadWithoutGet()
        self.canlock=True
        self.unlock()

    def StartClearTimer(self,upass):
        self.timer_clear.Start(1000*20,wx.TIMER_ONE_SHOT)
        self.last_copied_pass=upass

    def OnTimerClear(self,evt):
        if not wx.TheClipboard.IsOpened():
            wx.TheClipboard.Open()
            if not wx.TheClipboard.IsSupported(wx.DataFormat(wx.DF_TEXT)):
                self.last_copied_pass=None
                return
            cdata = wx.TextDataObject()
            wx.TheClipboard.GetData(cdata)
            if cdata.GetText() == self.last_copied_pass:
                wx.TheClipboard.Clear()
            wx.TheClipboard.Close()
        else:
            self.timer_clear.Start(1000*3,wx.TIMER_ONE_SHOT)

    def OnFocus(self,evt):
        if self.text_ctrl_search_input.IsShown()==False:
            self.lock_label.SetFocus()







class MyApp(wx.App):

    def SetWin(self,win):
        self.mainwin=win

    def OnExit(self):
        try:
            self.mainwin.ExitMe()
        except:
            pass

# end of class MainPannel

class MyWorkerPool:
    def __init__(self,target):
        self.process_list=[]
        self.taskQ=multiprocessing.Queue()
        self.doneQ=multiprocessing.Queue()
        proc_count=multiprocessing.cpu_count()-1
        if proc_count<1:
            proc_count=1
        for n in range(proc_count): #minus one to leave some CPU resource for other tasks
            p=multiprocessing.Process(target=target,args=(self.taskQ, self.doneQ))
            p.start()
            self.process_list.append(p)

    def destruct(self):
        for p in self.process_list:
            p.terminate()
        isalive = 1
        while isalive:
            isalive = 0
            for p in self.process_list:
                isalive = isalive + p.is_alive()
            time.sleep(0.5)


def Login():
    diag=loginDiag.LoginDiag(None)
    diag.CentreOnScreen()
    if diag.ShowModal()==wx.ID_OK:
        uname=diag.text_ctrl_uname.GetValue().strip().encode('utf-8')
        upass=diag.text_ctrl_upass.GetValue().encode('utf-8')
	diag.Destroy()
        return (uname,upass)
    else:
	diag.Destroy()
        return None






if __name__ == "__main__":
    multiprocessing.freeze_support()
    logfname=os.path.join(common.getRootConfDir(),"manpassc.log")
    app=MyApp(True,logfname)
    LI=Login()
    if LI!=None:
        Dpool=MyWorkerPool(apiclient.decryptRecordWithSingleSalt)
        Epool=MyWorkerPool(apiclient.genRecord)
        myframe=MainPannel(None,LI[0],LI[1],Dpool,Epool)
        app.SetWin(myframe)
        app.SetTopWindow(myframe)
        app.MainLoop()


